// Code generated by Kitex v0.5.2. DO NOT EDIT.

package test

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	api "test/kitex_gen/api"
)

func serviceInfo() *kitex.ServiceInfo {
	return testServiceInfo
}

var testServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "test"
	handlerType := (*api.Test)(nil)
	methods := map[string]kitex.MethodInfo{
		"reply": kitex.NewMethodInfo(replyHandler, newTestReplyArgs, newTestReplyResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func replyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.TestReplyArgs)
	realResult := result.(*api.TestReplyResult)
	success, err := handler.(api.Test).Reply(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTestReplyArgs() interface{} {
	return api.NewTestReplyArgs()
}

func newTestReplyResult() interface{} {
	return api.NewTestReplyResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Reply(ctx context.Context, req *api.Request) (r *api.Response, err error) {
	var _args api.TestReplyArgs
	_args.Req = req
	var _result api.TestReplyResult
	if err = p.c.Call(ctx, "reply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
